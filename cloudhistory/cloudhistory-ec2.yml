# ----------------------------------------------------- 
# This playbook is for deploying the cloud history and eucalyptus reporting instance into EC2/Euca
# TJ 14.8.2015
# -----------------------------------------------------

- name: Stage instance
  hosts: local
  connection: local
  user: root
  gather_facts: false

  vars_files:
      - vars/euca-dw.yml
  tasks:
    - name: Create (or verify that it exists) security group
      local_action:
        module: ec2_group
        name: "{{ security_group }}"
        description: admindw history db instance datawarehouse security group
        rules:
        - proto: icmp
          from_port: -1
          to_port: -1
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 8443
          to_port: 8443
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0

    - name: Launch instance
      local_action: ec2 keypair={{ keypair }} group={{ security_group }} instance_type={{ instance_type }} image={{ image }} zone={{ zone}} instance_tags='{"type":"historydb"}' wait_timeout=400 wait=true
      register: ec2
      
    - name: Add new instance to host group
      local_action: add_host hostname={{ item.public_ip }} groupname=reporting
      with_items: ec2.instances

     
    - name: Wait for SSH to come up
      local_action: wait_for host={{ item.public_ip }} port=22 delay=60 timeout=320 state=started
      with_items: ec2.instances
 
- name: Configure instance
  hosts: reporting
  user: root
  gather_facts: True

  vars_files:
      - vars/euca-dw.yml
      
  tasks:
    - name: Ensure NTP daemon is up and running
      action: service name=ntpd state=started

    - name: Ensure NTP is uptodate
      action: command ntpdate -u {{ ntphost }}

    - name: Create eemon user with passwd
      action: user name=eemon home={{ eemonhome }} password=VW01cZ06C7w7g
    # if we have ansible 1.9 installed we can say
    # user: name={{ monitorusername }} home={{ eemonhome }} password={{ eemonpassword |password_hash('sha512') }}
    #- name: create sshkey for root
    #  action: shell 'ssh-keygen -t rsa -b 2048 -N "" -f /root/.ssh/id_rsa'
      
    - name: Download and yum install Eucalyptus release RPM
      yum: name=http://downloads.eucalyptus.com/software/eucalyptus/4.1/centos/6/x86_64/eucalyptus-release-4.1.el6.noarch.rpm disable_gpg_check=yes

    - name: Download and yum install euca2ools repo RPM
      yum: name=http://downloads.eucalyptus.com/software/euca2ools/3.2/centos/6/x86_64/euca2ools-release-3.2.el6.noarch.rpm disable_gpg_check=yes

    - name: download and install epel 6 repo
      yum: name=http://downloads.eucalyptus.com/software/euca2ools/3.2/centos/6/x86_64/epel-release-6.noarch.rpm disable_gpg_check=yes

    - name: Install Eucalyptus Reporting Archive (Data Warehouse)
      yum: name=eucadw state=latest

    - name: Install cloud history and other needed packages
      yum: name=python-psycopg2,openssh-clients,vim,python-argparse,bind-utils,unzip,tidy,euca2ools state=latest

    - name: Install Cloud history query related packages
      yum: name=httpd,php,php-pgsql state=latest

    - name: Enable httpd on restart
      action: service name=httpd enabled=yes

    - name: start httpd
      action: service name=httpd state=started

    - name: stop iptables
      action: service name=iptables state=stopped enabled=no

    - name: Change inline the php to match the this clouds parameters
      action: template  src=templates/index.j2 dest=/var/www/html/index.php owner=root mode=0755

    - name: Install PostgreSQL 9.1
      yum: name=postgresql91-server state=latest

    - name: allow write to  {{ pgdir }}
      action: file dest={{ pgdir }} mode=0777 owner=root group=root state=directory recurse=yes

    - name: Initialize the PostgreSQL database
      action: shell su - postgres -c "/usr/pgsql-9.1/bin/initdb -D {{ pgdir }}/pgsql/9.1/data"

    - name: Template pg_hba.conf
      action: template src=templates/pg_hba.conf.j2 dest={{pgdir}}/pgsql/9.1/data/pg_hba.conf owner=postgres mode=0600

    - name: Change listen address to all
      action: template src=templates/postgresql.j2  dest={{pgdir}}/pgsql/9.1/data/postgresql.conf owner=postgres mode=0600

    - name: sed PGDATA /etc/init.d/postgresql-9.1
      action: shell sed -i 's_^PGDATA=/var/lib/pgsql/9.1/data_PGDATA={{ pgdir }}/pgsql/9.1/data_' /etc/init.d/postgresql-9.1

    - name: sed PGPORT /etc/init.d/postgresql-9.1 
      action: shell sed -i 's_^PGPORT=5432_PGPORT={{ pgport }}_' /etc/init.d/postgresql-9.1

    - name: sed PGLOG /etc/init.d/postgresql-9.1
      action: shell sed -i 's_^PGLOG=/var/lib/pgsql/9.1/pgstartup.log_PGLOG={{ pgdir }}/pgsql/9.1/pgstartup.log_' /etc/init.d/postgresql-9.1
 
    - name: Pausing
      action: pause seconds=15

    - name: Start PostgreSQL 9.1
      action: service name=postgresql-9.1 state=started

    - name: Pausing
      action: pause seconds=10

    - name: Create the datawarehouse PostgreSQL database
      action: postgresql_db db=eucalyptus_reporting port={{ pgport }}

    - name: Configure the PostgreSQL postgres user for datawarehousedb
      action: postgresql_user db=eucalyptus_reporting user=eucalyptus password={{ pg_password }} priv=ALL port={{ pgport }}

    - name: Configure the PostgreSQL eemon user for cloud history db
      action: postgresql_user user=eemon password={{ eemondbpasswd }}  role_attr_flags=CREATEDB port={{ pgport }}

    - name: Create the cloudhistory $histdbname PostgreSQL database
      action: postgresql_db db={{ histdbname }} owner=eemon port={{ pgport }}

    - name: Configure the PostgreSQL $rodbusername user for cloud history db $histdbname
      action: postgresql_user db={{ histdbname }} user={{rodbusername}} password={{ reemondbpasswd }} priv=ALL port={{ pgport }}

    - name: Configure the PostgreSQL $rodbusername user for eucalyptus_reporting db
      action: postgresql_user db=eucalyptus_reporting user={{rodbusername}} password={{ reemondbpasswd }} priv=ALL port={{ pgport }}


    - name: Restart PostgreSQL 9.1
      action: service name=postgresql-9.1 state=started 
    
    - name: Copy sql table creation scripts to instance
      action: copy src=files/{{ item }} dest={{ eemonhome }} owner=eemon group=eemon mode=0755
      with_items:
      - create_accounts_table.sql
      - create_images_table.sql
      - create_instance_table.sql
      - create_instance_load_table.sql
      - create_instancetypes_table.sql

    - name:  Create tables to cloud history $histdbname database
      action: command su - eemon -l -c "psql -p {{ pgport }}  {{ histdbname }} -f {{ item }}"
      with_items:
      - create_accounts_table.sql
      - create_images_table.sql
      - create_instance_table.sql
      - create_instance_load_table.sql 
      - create_instancetypes_table.sql

    - name: Copy template move database dump script
      action: template src=templates/move_db_dump.j2 dest=/root/move_db_dump.sh owner=root mode=0755

    - name: Create Cronjob for moving backup file
      action: cron name="move backups" minute=30 hour="5" user=root job="timeout 3600 /root/move_db_dump.sh {{ histdbname }} >/dev/null 2>&1"

    - name: Create cloudhistory directory
      action: command su - eemon -l -c "mkdir -p {{ eemonhome }}/cloudhistory/"

    - name: Copy cloudhistory python files to instance
      action: copy src=files/{{ item }} dest={{ eemonhome }}/cloudhistory/{{ item }} owner=eemon group=eemon mode=0755
      with_items:
      - readinsertinstances.py
      - readinsertimages.py
      - readinsertaccounts.py
      - readinsertinstanceload.py
      - readinsertinstancetypes.py

    - name: Copy templated accountdata cronjob scripts to instance 
      action:  template src=templates/update_accountdata_to_db.j2 dest={{ eemonhome }}/cloudhistory/update_accountdata_to_db.sh owner=eemon mode=0755

    - name: Copy templated imagedata cronjob scripts to instance
      action:  template src=templates/update_imagedata_to_db.j2 dest={{ eemonhome }}/cloudhistory/update_imagedata_to_db.sh owner=eemon mode=0755

    - name: Copy templated instancedata cronjob scripts to instance
      action:  template src=templates/update_instancedata_to_db.j2 dest={{ eemonhome }}/cloudhistory/update_instancedata_to_db.sh owner=eemon mode=0755

    - name: Copy templated instance load data scripts to instance
      action: template src=templates/update_instanceloaddata_to_db.j2 dest={{ eemonhome }}/cloudhistory/update_instanceloaddata_to_db.sh owner=eemon mode=0755

    - name: Copy templated instance type data scripts to instance
      action: template src=templates/update_instancetypedata_to_db.j2 dest={{ eemonhome }}/cloudhistory/update_instancetypedata_to_db.sh owner=eemon mode=0755

    - name: Create eemon Cronjob for updating image data
      action: cron name="Update Imagedata" minute=36 hour="1,5,9,13,17,21" user=eemon job="timeout 720 {{eemonhome}}/cloudhistory/update_imagedata_to_db.sh {{ cloudname }} {{ histdbname }} >/dev/null 2>&1"

    - name: Create eemon Cronjob for updating account data
      action: cron name="Update Account data" minute=26 hour="1,5,9,13,17,21" user=eemon job="timeout 720 {{eemonhome}}/cloudhistory/update_accountdata_to_db.sh {{ cloudname }} {{ histdbname }} >/dev/null 2>&1"

    - name: Create eemon Cronjob for updating instance data
      action: cron name="Update Instance data" minute="0-59" user=eemon job="timeout 720 {{eemonhome}}/cloudhistory/update_instancedata_to_db.sh {{ cloudname }} {{ histdbname }} >/dev/null 2>&1"

    - name: Create eemon Cronjob for updating instancetype data
      action: cron name="Update Instancetype data" minute="54" hour="1,5,9,13,17,21" user=eemon job="timeout 720 {{eemonhome}}/cloudhistory/update_instancetypedata_to_db.sh {{ cloudname }} {{ histdbname }} >/dev/null 2>&1"

    - name: Create eemon Cronjob for updating load instance data
      action: cron name="Update Instance load data" minute="*/15" user=eemon job="timeout 720 {{eemonhome}}/cloudhistory/update_instanceloaddata_to_db.sh {{ cloudname }} {{ histdbname }}  >/dev/null 2>&1"

    - name: Create postgres user Cronjob for backing up the databases
      action: cron name="backup dbs" minute=30 hour="3" user=postgres job="timeout 3600 /usr/pgsql-9.1/bin/pg_dumpall -p {{ pgport }} -f {{ dbdumpdir }}/{{ histdbname }}.sql >/dev/null 2>&1"

    - name: Create admin creds directory
      action: command su - eemon -l -c "mkdir -p {{ eemonhome }}/cloudhistory/.euca_{{ cloudname }}_admin/"

    - name: Get Eucalyptus credentials of the cloud {{ cloudname }}
      action: copy src={{adminzipdir}}/admin.zip dest={{eemonhome}}/cloudhistory/.euca_{{ cloudname }}_admin/admin.zip owner=eemon group=eemon mode=0755

    - name: unzip admin credentials
      action: command su - eemon -l -c "cd {{eemonhome}}/cloudhistory/.euca_{{ cloudname }}_admin;unzip admin.zip"

    - name:  Create result XML file by touch for image data collection
      action: command su - eemon -l -c "touch {{eemonhome}}/cloudhistory/{{ cloudname }}_tidy_images.xml"

    - name: First time run account data collection
      action: command su - eemon -l -c "cd {{eemonhome}}/cloudhistory;./update_accountdata_to_db.sh {{ cloudname }} {{ histdbname }}"  ignore_errors=yes

    - name: First time run of image data collection
      action: command su - eemon -l -c "cd {{eemonhome}}/cloudhistory;./update_imagedata_to_db.sh {{ cloudname }} {{ histdbname }}" ignore_errors=yes

    - name: First time run of instance load data collection
      action: command su - eemon -l -c "cd {{eemonhome}}/cloudhistory;./update_instanceloaddata_to_db.sh {{ cloudname }} {{ histdbname }}" ignore_errors=yes

    - name: Second time run account data collection
      action: command su - eemon -l -c "cd {{eemonhome}}/cloudhistory;./update_accountdata_to_db.sh {{ cloudname }} {{ histdbname }}"  ignore_errors=yes

    - name: Second time run of image data collection
      action: command su - eemon -l -c "cd {{eemonhome}}/cloudhistory;./update_imagedata_to_db.sh {{ cloudname }} {{ histdbname }}" ignore_errors=yes

    - name: Pausing for db to start
      action: pause seconds=30

    - name: Grant $rodbusername read access to $historydbname db
      action: command su - postgres -l -c "psql {{ histdbname }}  -p {{ pgport }} -c 'GRANT SELECT ON ALL TABLES IN SCHEMA public TO {{rodbusername}};'" ignore_errors=yes

    - name: Grant $rodbusername read access to eucalyptus_reporting db
      action: command su - postgres -l -c "psql eucalyptus_reporting -p {{ pgport }} -c 'GRANT SELECT ON ALL TABLES IN SCHEMA public TO {{rodbusername}};'" ignore_errors=yes

    - name: Finally update dynamic DNS to point to the new historyDB instance
      shell: (echo "update delete {{cloudname}}history.{{dyndnsserver}} A" ; echo "update add {{cloudname}}history.{{dyndnsserver}} 0 A {{inventory_hostname}}" ; echo "send") | nsupdate
